libMeshlessVis

Introduction
----------------------------------------
This library implements volume visualization of meshless data on NVIDIA graphics hardware using CUDA.
Currently, the volume visualization techniques used is Fourier volume rendering.
There is support for meshless data using the SPH spline, the C2 Wendland function, and the Gaussian.
Please contact us if you need other basis functions supported.

Authors
----------------------------------------
Andrew Corrigan, acorriga@gmu.edu
John Wallin, jwallin@gmu.edu

License
----------------------------------------
The code is licensed under the GPL, a copy of which is in the file LICENSE.
If it would be useful to you for the code to be licensed under alternative license, please contact us.

If you use this library for research, please cite the paper at http://cds.gmu.edu/~acorriga/pubs/meshless_fvr

Requirements:
----------------------------------------
CUDA
GLEW
OpenGL >=2.1 + ARB_texture_float
wxWidgets 2.8
boost/math/quaternion.h
Magick++
		
Known issues:
----------------------------------------
SEVERE: This code does not avoid the Windows/Linux/CUDA bug that if the graphics card takes too long to execute a kernel then the code/OS crashes.
        This happens with libMeshlessVis if you turn the settings up too high with respect to how fast your hardware is.


Building:
----------------------------------------
We recommend using our 32-bit Windows XP binaries or our 32/64-bit Ubuntu 7.10 binaries.
Otherwise there are makefiles for Linux and Visual Studio solutions and projects included for Windows 

Using the library in your code
---------------------------------------
Include meshless_vis.h

Also, link with the static library,
Windows: meshless_vis.lib or meshless_vis_emu.lib
Linux:   libmeshless_vis.a or libmeshless_vis_emu.a

Link with the CUDA libraries:
In Windows:
* cuda.lib
* cudart.lib
* cufft.lib (or cufftemu.lib if built with emulation enabled)
* cutil.lib (from the CUDA sdk)

In Linux:
* libcuda.a
* libcudart.a
* libcufft.a (or libcufftemu.a if built with emulation enabled)
* libcutil.a (from the CUDA sdk)

Link with GLEW (and possibly OpenGL).
